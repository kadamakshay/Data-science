#data analytics 1

#create a linear regression model to predict boston housing price


#import required libraries 

import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt 
import warnings 
warnings.filterwarnings('ignore')

#read the dataset
column_names = ['CRIM', 'ZN', 'INDUS', 'CHAS', 'NOX', 'RM', 'AGE', 'DIS', 'RAD', 'TAX', 'PTRATIO', 'B', 'LSTAT', 'MEDV']

df = pd.read_csv(r"C:\Users\lenovo\Desktop\data science Assignments\dataset\housing.csv", header=None, delimiter=r"\s+",names=column_names)

print(df.head())


#shape of the data 
print(df.shape)
# check for null values 
print(df.isnull().sum())

#inforamtion of the dataset
print(df.info())

#describe 
print(df.describe())

#correlation of the dataset 
print(df.corr())


#Detect and remove outliers    
#select only three columns

df = df[["CRIM","LSTAT","MEDV"]]
print(df.head())

for i in range(2): 
    plt.subplot(2,6, i+1)
    sns.boxplot(df[df.columns[i]])
    

#detect using zscore 


df['zscore_crim'] = (df['CRIM'] - df['CRIM'].mean())/df['CRIM'].std()
df['zscore_lstat'] = (df['LSTAT'] - df['LSTAT'].mean())/df['LSTAT'].std()

print(df.head())


print("Shape of the data before outliers ", df.shape)

#remove outliers 

zscore_cols = ['zscore_crim','zscore_lstat']

for cols in zscore_cols:
    df1 = df[(df['zscore_crim']>-3) & (df['zscore_crim']<3)]
    
print(df.head())

df= df1.copy()
print("Shape of the data after removed outliers ", df.shape)

#scalling
from sklearn.preprocessing import StandardScaler 

features = ["CRIM","LSTAT"]

sc_x = StandardScaler()
df[features] = sc_x.fit_transform(df[features])
print(df.head())



#split the dataset into training and testring set
X = df[features]
y = df['MEDV']
from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(X,y,test_size=0.2, random_state=4200000)
print("length of X: ",len(X))
print("length of X_train: ",len(x_train))
print("length of X test: ",len(x_test))
print("length of Y: ",len(y))
print("length of y_train: ",len(y_train))
print("length of y_test: ",len(y_test))


#model building (Linear Regression)

from sklearn.linear_model import LinearRegression

lr = LinearRegression() #create an instance for LinearRegression
lr.fit(x_train,y_train) #train the model by the train data
y_pred = lr.predict(x_test) #prediciton on test data


#metrics (Mean Squared Error)

from sklearn.metrics import mean_squared_error

mse = mean_squared_error(y_test, y_pred)

print("MSE:",mse)
